{"version":3,"sources":["Components/styles/globalStyles.tsx","Components/styles/theme.ts","Components/styles/todoStyles.tsx","Components/EmojiPicker.tsx","Components/InputForm.tsx","Components/RenderedEmoji.tsx","Components/ToDo.tsx","Components/Options.tsx","Components/ListHeader.tsx","Components/storage/LocalStorage.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","props","theme","mainBackgroundColor","lightTheme","todoBackgroundColor","mainBackground","process","mobileBackground","themeChanger","headerColor","optionsColor","optionsHover","optionsActive","todoTextColor","todoTextLineThrough","shadowColor","borderColor","CustomCheckbox","styled","div","index","TodoBox","li","done","StyledSpanEmoji","StyledDivWrapperEmoji","EmojiPicker","useEffect","onMouseLeave","refresh","React","useState","isShowEmoji","setEmojiState","onClick","src","alt","className","onSelect","addEmoji","showPreview","autoFocus","InvisibleSubmit","button","StyledInputForm","form","InputForm","textRef","createRef","doneRef","doRefresh","onSubmit","event","preventDefault","value","current","todo","key","Date","now","toString","title","checked","newIndex","addTodo","currentTarget","reset","type","name","id","ref","htmlFor","data-testid","data","native","focus","span","RenderedEmoji","dangerouslySetInnerHTML","__html","twemoji","parse","folder","ext","size","CancelButton","ToDo","state","handleChange","updatedTodo","target","changeTodo","onChange","style","maxWidth","length","deleteTodo","OptionsField","ul","FilterItem","ClearCompleted","Options","e","changeFilter","status","activeTodos","this","todos","reduce","tally","defaultChecked","filter","deleteTodos","Component","StyledHeader","ListHeader","window","print","inIframe","self","top","useStickyState","defaultValue","console","log","stickyValue","localStorage","getItem","JSON","setValue","setItem","stringify","removeItem","TodoWrapper","TodoList","BackgroundHeader","Footer","footer","App","todosSetValue","filterValue","setFilter","currentTheme","defaultTodos","addEventListener","call","forEach","push","parent","postMessage","newTodos","myIndex","findIndex","item","splice","applyListFilter","getIndex","onDragEnd","result","destination","reorderedTodos","source","movedTodo","onDragUpdate","initial","provided","indexes","map","indexOf","droppableId","snapshot","droppableProps","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","filterObject","uncomplete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d87b186f.chunk.js","sourcesContent":["\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport {Theme} from \"./theme\";\r\n\r\nimport './emoji.css';\r\n \r\ninterface Props {\r\n    theme: Theme;\r\n}\r\n  \r\nconst GlobalStyle = createGlobalStyle<Props>`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n\r\n  -webkit-print-color-adjust: exact !important;   /* Chrome, Safari, Edge */\r\n  color-adjust: exact !important;                 /*Firefox*/\r\n}\r\n\r\n\r\n    *, *:before, *:after {\r\n    }\r\n\r\n    \r\n\r\n    body {\r\n        font-family: \"Josefin Sans\", sans-serif;\r\n        line-height: 1.5;\r\n        background-color: ${props => props.theme.mainBackgroundColor};\r\n        min-height: 100vh;\r\n        overflow: none;\r\n    }\r\n\r\n    a {\r\n        text-decoration: none;\r\n    }\r\n\r\n    li {\r\n        list-style: none;\r\n    }\r\n\r\n    input:focus,\r\n    input:active,\r\n    button:focus,\r\n    button:active {\r\n        outline: none;\r\n        border: none;\r\n    }\r\n\r\n\r\n\r\n    .emoji-mart-scroll {\r\n        border-bottom: 0;\r\n        margin-bottom: 6px;\r\n      }\r\n      \r\n      .emoji-mart-scroll + .emoji-mart-bar {\r\n        display: none;\r\n      }\r\n\r\n      @media print\r\n        {    \r\n\r\n            .no-print, .no-print *\r\n            {\r\n                display: none !important;\r\n            }\r\n        }\r\n`;\r\n \r\nexport default GlobalStyle;","// could I create a general theme and extend later to avoid duplication?\r\n\r\nexport interface Theme {\r\n    mainBackgroundColor: string;\r\n    todoBackgroundColor: string;\r\n    mainBackground: string;\r\n    mobileBackground: string;\r\n    themeChanger: string;\r\n    headerColor: string;\r\n    optionsColor: string;\r\n    optionsHover: string;\r\n    optionsActive: string;\r\n    todoTextColor: string;\r\n    todoTextLineThrough: string;\r\n    shadowColor: string;\r\n    borderColor: string;\r\n}\r\n\r\n\r\nexport const lightTheme: Theme = {\r\n    mainBackgroundColor: 'hsl(0, 0%, 98%)',\r\n    todoBackgroundColor: 'hsl(0, 0%, 100%)',\r\n    mainBackground: `url(${process.env.PUBLIC_URL + '/images/bg-desktop-light.jpg'})`,\r\n    mobileBackground: `url(${process.env.PUBLIC_URL + '/images/bg-mobile-light.jpg'})`,\r\n    themeChanger: `url(${process.env.PUBLIC_URL + '/images/icon-moon.svg'})`,\r\n    headerColor: 'hsl(0, 0%, 100%)',\r\n    optionsColor: 'hsl(236, 9%, 61%)',\r\n    optionsHover: 'hsl(236, 9%, 35%)',\r\n    optionsActive: 'hsl(220, 98%, 61%)',\r\n    todoTextColor: 'hsl(235, 19%, 35%)',\r\n    todoTextLineThrough: 'hsl(236, 9%, 61%)',\r\n    shadowColor: 'hsl(236, 33%, 92%)',\r\n    borderColor: 'hsl(236, 33%, 92%)',\r\n\r\n}\r\n\r\nexport const darkTheme: Theme = {\r\n    mainBackgroundColor: 'hsl(235, 21%, 11%);',\r\n    todoBackgroundColor: 'hsl(235, 24%, 19%);',\r\n    mainBackground: `url(${process.env.PUBLIC_URL + '/images/bg-desktop-dark.jpg'})`,\r\n    mobileBackground: `url(${process.env.PUBLIC_URL + '/images/bg-mobile-dark.jpg'})`,\r\n    themeChanger: `url(${process.env.PUBLIC_URL + '/images/icon-sun.svg'})`,\r\n    headerColor: 'hsl(0, 0%, 100%)',\r\n    optionsColor: 'hsl(233, 14%, 35%)',\r\n    optionsHover: 'hsl(234, 39%, 85%);',\r\n    optionsActive: 'hsl(220, 98%, 61%)',\r\n    borderColor: 'hsl(233, 14%, 35%)',\r\n    todoTextColor: 'hsl(234, 39%, 85%)',\r\n    todoTextLineThrough: 'hsl(233, 14%, 35%)',\r\n    shadowColor: 'hsl(0, 0%, 0%)',\r\n}","import styled from 'styled-components';\r\nimport {Theme} from './theme';\r\n\r\ninterface CustomCheckboxProps {\r\n  index: number;\r\n  theme: Theme;\r\n}\r\n\r\nexport const CustomCheckbox = styled.div<CustomCheckboxProps>`\r\n\r\n  position: relative;\r\n  height: 1.3em;\r\n  width: 0.8em;\r\n\r\n  label {\r\n    border: 1px solid ${props => {\r\n      if (props.index < 3) {\r\n        return \"rgb(255, 105, 105);\";\r\n      } else if (props.index < 6) {\r\n        return \"rgb(171 116 0);\";\r\n      } else {\r\n        return \"rgb(71 89 131);\"\r\n      }\r\n    }}\r\n    border-radius: 25%;\r\n    border-width: ${props => {\r\n      if (props.index < 3) {\r\n        return \"0.1em;\";\r\n      } else if (props.index < 6) {\r\n        return \"0.12em;\";\r\n      } else {\r\n        return \"0.12em;\"\r\n      }\r\n    }}\r\n    cursor: pointer;\r\n    height: 1.2em;\r\n    left: 0;\r\n    position: absolute;\r\n    top: 0;\r\n    width: 1.2em;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  label:hover {\r\n    border-color2: ${props => props.theme.optionsHover};\r\n  }\r\n\r\n  label img {\r\n    opacity: 0;\r\n    width: 55%;\r\n  }\r\n\r\n  input[type=\"checkbox\"] {\r\n    visibility: hidden;\r\n  }\r\n\r\n  input[type=\"checkbox\"]:checked + label {\r\n    background2: linear-gradient(120deg, #57ddff, #c058f3);\r\n    border2: none;\r\n  }\r\n\r\n  \r\n  input[type=\"checkbox\"] + label span {\r\n    display: none;\r\n  }\r\n  \r\n  input[type=\"checkbox\"]:checked + label span {\r\n    margin-top: 0.2em;\r\n    display: block;\r\n\r\n  }\r\n\r\n  input[type=\"checkbox\"]:checked + label img {\r\n    opacity: 1;\r\n  }\r\n\r\n`;\r\n\r\n\r\ninterface TodoBoxProps {\r\n  done: boolean;\r\n  index: number;\r\n}\r\n\r\nexport const TodoBox = styled.li<TodoBoxProps>`\r\n  background-color: ${props => props.theme.todoBackgroundColor};\r\n  \r\n  color: ${props => {\r\n    if (props.index < 3) {\r\n      return \"rgb(255, 105, 105);\";\r\n    } else if (props.index < 6) {\r\n      return \"rgb(171 116 0);\";\r\n    } else {\r\n      return \"rgb(71 89 131);\"\r\n    }\r\n  }}\r\n \r\n  padding: ${props => {\r\n    /* top | right | bottom | left */\r\n    if (props.index < 3) {\r\n      return \"0.7em 0.7em 0.7em 1em\";\r\n    } else if (props.index < 6) {\r\n      return \"0.7em 0.7em 0.7em 1.6em\";\r\n    } else {\r\n      return \"0.8em 0.7em 0.8em 2.0em\";\r\n    }\r\n  }};\r\n  grid-gap: 1em;\r\n  display: grid;\r\n  grid-template-columns: auto minmax(0, 1fr) 20px 20px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-bottom: 2px dotted hsl(236deg 3% 81%);\r\n\r\n  font-size: ${props => {\r\n    if (props.index < 3) {\r\n      return \"30px\";\r\n    } else if (props.index < 6) {\r\n      return \"22px\";\r\n    } else {\r\n      return \"18px\";\r\n    }\r\n  }};\r\n\r\n  .emoji {\r\n    vertical-align: sub;\r\n      margin-left: 3px;\r\n      margin-right: 3px;\r\n\r\n      height: ${props => {\r\n        if (props.index < 3) {\r\n          return \"30px\";\r\n        } else if (props.index < 6) {\r\n          return \"22px\";\r\n        } else {\r\n          return \"18px\";\r\n        }\r\n      }};\r\n      width: ${props => {\r\n        if (props.index < 3) {\r\n          return \"30px\";\r\n        } else if (props.index < 6) {\r\n          return \"22px\";\r\n        } else {\r\n          return \"18px\";\r\n        }\r\n      }};\r\n  }\r\n\r\n  -webkit-transition: all 0.3s;\r\n  -moz-transition: all 0.3s;\r\n    -o-transition: all 0.3s;\r\n       transition: all 0.3s;\r\n\r\n\r\n  \r\n  input {\r\n\r\n    min-width: 150px;\r\n   \r\n    @media print { \r\n      display: none !important;\r\n    }\r\n\r\n    font: inherit;\r\n    background: inherit;\r\n    \r\n    color: inherit;\r\n    border: none;\r\n    \r\n\r\n    \r\n    text-decoration: ${props => props.done && 'line-through'};\r\n  }\r\n\r\n\r\n  @media (max-width: 650px) {\r\n    \r\n  }\r\n`;\r\n//color: ${props => props.done ? props.theme.todoTextLineThrough : props.theme.todoTextColor};","import React, {useEffect} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\n\r\n\r\nconst StyledSpanEmoji = styled.div`\r\n@media print { display: none !important; }\r\n\r\ncolor: black;\r\n-webkit-filter: grayscale(100%);\r\nfilter: grayscale(100%);\r\n\r\nheight: 1.5em;\r\nwidth: 1.5em;\r\n\r\ndisplay: flex;\r\nalign-items: center;\r\n\r\nimg {\r\n    height: 20px;\r\n    cursor: pointer;\r\n\r\n}\r\n`;\r\n\r\n\r\nconst StyledDivWrapperEmoji = styled.div`\r\n\r\nwidth: 0;\r\nright: 400px;\r\nz-index: 1000;\r\nposition: absolute;\r\nheight: 0;\r\n\r\n.wrapper {\r\n    width: 360px;\r\n}\r\n\r\n`;\r\n\r\ninterface IProps {\r\n    addEmoji(value: any): void;\r\n    refresh: boolean;\r\n}\r\n\r\nexport const EmojiPicker =  (props: IProps) => {\r\n \r\n    useEffect(() => {\r\n        onMouseLeave(); //children function of interest\r\n      }, [props.refresh]);\r\n      \r\n    const [isShowEmoji, setEmojiState] = React.useState(false);\r\n\r\n    const toggleEmoji = () => {\r\n        setEmojiState(!isShowEmoji);\r\n    }\r\n\r\n    const onMouseLeave = () => {\r\n        setEmojiState(false);\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <StyledSpanEmoji onClick={toggleEmoji}>\t<img src={process.env.PUBLIC_URL + \"/images/emoticon-30-xxl.png\"} alt=\"\" /></StyledSpanEmoji>\r\n\r\n            {isShowEmoji ?\r\n                <StyledDivWrapperEmoji>\r\n                    <div className=\"wrapper\" onMouseLeave={onMouseLeave}>\r\n                        <Picker onSelect={props.addEmoji} showPreview={false} autoFocus={false} />\r\n                    </div>\r\n                </StyledDivWrapperEmoji> : null}\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CustomCheckbox } from './styles/todoStyles';\r\nimport {FormEvent, useState} from \"react\";\r\nimport {TODO} from \"./ToDo\";\r\nimport { EmojiPicker } from './EmojiPicker';\r\n\r\nconst InvisibleSubmit = styled.button`\r\n    visibility: hidden;\r\n    display: none;\r\n`;\r\n\r\n// there is little difference between the TodoBox and this - can I maybe extend the todoBox styles somehow?\r\nconst StyledInputForm = styled.form`\r\n    background-color: ${props => props.theme.todoBackgroundColor};\r\n    padding: 1em;\r\n    grid-gap: 1em;\r\n    display: grid;\r\n    grid-template-columns: auto minmax(0, 1fr) auto;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: 1.5em;\r\n    border-radius: 0.3em;\r\n\r\n    input {\r\n        font: inherit;\r\n        background: inherit;\r\n        border: none;\r\n        color: ${props => props.theme.todoTextColor};\r\n  }\r\n\r\n  @media(max-width: 650px) {\r\n    font-size: 0.8rem;\r\n  }\r\n\r\n  @media print\r\n  { \r\n  display: none !important;\r\n\r\n  }\r\n`;\r\n\r\n\r\n\r\ninterface IInputFormProps {\r\n    addTodo(todo: TODO): void;\r\n  }\r\n  /*\r\n  interface IInputFormState {\r\n  }\r\n*/\r\n\r\n//class InputForm extends React.Component<IInputFormProps, IInputFormState> {\r\n\r\n    \r\nexport const InputForm = (props: IInputFormProps) => {\r\n\r\n    const textRef = React.createRef<HTMLInputElement>();\r\n    const doneRef = React.createRef<HTMLInputElement>();\r\n    \r\n    const createTodo = (event: FormEvent<HTMLFormElement>): void => {\r\n        event.preventDefault();\r\n\r\n        const value = textRef?.current?.value || \"\";\r\n\r\n        if (value === \"\") {\r\n            return;\r\n        }\r\n\r\n        const todo: TODO = {\r\n            key: Date.now().toString(),\r\n            title: value,\r\n            done: doneRef?.current?.checked || false,\r\n            //isEdit: false,\r\n            newIndex: -1\r\n        }\r\n        props.addTodo(todo);\r\n        event.currentTarget.reset();\r\n    }\r\n\r\n    const addEmoji = (data: any): void => {\r\n        if (textRef?.current) {\r\n            textRef.current.value += data.native;\r\n\r\n            textRef.current.focus();\r\n        }\r\n\r\n    }\r\n    \r\n  \r\n    const [refresh, doRefresh] = useState(false);\r\n    const onMouseLeave = () => {\r\n\r\n        doRefresh(!refresh);\r\n    }\r\n\r\n\r\n    return (\r\n        \r\n        <StyledInputForm onSubmit={createTodo} onMouseLeave={onMouseLeave}>\r\n            <CustomCheckbox index={-1}>\r\n                <input type=\"checkbox\" name=\"done\" id=\"done\" ref={doneRef} />\r\n                <label htmlFor=\"done\">\r\n                    <img src={process.env.PUBLIC_URL + \"/images/icon-check.svg\"} alt=\"\"/>\r\n                </label>\r\n            </CustomCheckbox>\r\n            <input type=\"text\" name=\"todo\" id=\"todo\" ref={textRef} data-testid=\"todo-input\"/>\r\n \r\n            <EmojiPicker addEmoji={addEmoji} refresh={refresh}/>\r\n            \r\n            <InvisibleSubmit type=\"submit\"></InvisibleSubmit>\r\n        </StyledInputForm>\r\n\r\n    )\r\n    \r\n}\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport twemoji from 'twemoji';\r\nimport styled from 'styled-components';\r\n\r\ninterface IRenderedEmojiProps {\r\n    value: string;\r\n  }\r\n\r\n\r\n  // there is little difference between the TodoBox and this - can I maybe extend the todoBox styles somehow?\r\nconst StyledSpanEmoji = styled.span`\r\n\r\n    display: none;\r\n  \r\n\r\n@media print\r\n{ \r\n    \r\n    display: inline-block;\r\n    width: auto;\r\n\r\n    overflow: hidden;\r\n\r\n}\r\n`;\r\n    \r\nexport const RenderedEmoji = (props: IRenderedEmojiProps) => {\r\n  \r\n    return (\r\n        <StyledSpanEmoji\r\n          dangerouslySetInnerHTML={{\r\n            __html: twemoji.parse(props.value, {\r\n              folder: 'svg',\r\n              ext: '.svg',\r\n              size: 35\r\n            })\r\n          }}\r\n        />\r\n      )\r\n    \r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CustomCheckbox, TodoBox } from './styles/todoStyles';\r\nimport { ChangeEvent, useState} from 'react';\r\n\r\n\r\nimport { RenderedEmoji } from './RenderedEmoji';\r\nimport { EmojiPicker } from './EmojiPicker';\r\n\r\nconst CancelButton = styled.button`\r\n\r\n  @media print { \r\n      display: none !important;\r\n    }\r\n\r\n  border: none;\r\n  background: inherit;\r\n  position: relative;\r\n  height: 1.5em;\r\n  width: 1.5em;\r\n  cursor: pointer;\r\n`;\r\n\r\n\r\n\r\n\r\nexport interface TODO {\r\n    done: boolean;\r\n    title: string;\r\n    key: string;\r\n    //isEdit: boolean;\r\n    newIndex: number;\r\n}\r\n\r\ninterface ITodoProps {\r\n    index: number;\r\n    todo: TODO;\r\n    deleteTodo?(todo: TODO): void;\r\n    changeTodo?(todo: TODO): void;\r\n}\r\n\r\ninterface ITodoState {\r\n}\r\n\r\n\r\nexport const ToDo = (props: ITodoProps, state: ITodoState) => {\r\n    const textRef = React.createRef<HTMLInputElement>();\r\n\r\n    \r\n\r\n    const addEmoji = (data: any): void => {\r\n\r\n        const updatedTodo: TODO = { ...props.todo };\r\n        updatedTodo.title += data.native;\r\n\r\n        if (props.changeTodo) {\r\n            props.changeTodo(updatedTodo);\r\n        }\r\n\r\n        //setEmojiState(false);\r\n\r\n        if (textRef.current) {\r\n            textRef.current.focus();\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        // 1. get current state and copy it\r\n        const updatedTodo: TODO = { ...props.todo };\r\n\r\n\r\n        // 2. update the copy of the current state\r\n        if (event.target.type === 'checkbox') {\r\n            updatedTodo.done = event.target.checked;\r\n        } else if (event.target.name === \"title\") {\r\n            updatedTodo.title = event.target.value;\r\n            //updatedTodo.isEdit = false;\r\n\r\n            //console.log(\"edited\", props.todo.isEdit);\r\n        }\r\n        /*\r\n        else {\r\n             updatedTodo[event.target.name] = event.target.value;\r\n        }*/\r\n        // 3. write the update to state\r\n        if (props.changeTodo) {\r\n            props.changeTodo(updatedTodo);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    handleClick = (e: any) => {\r\n        //e.stopPropagation();\r\n  \r\n       console.log(\"clicked\", props.todo.isEdit);\r\n        \r\n        // 1. get current state and copy it\r\n        const updatedTodo: TODO = { ...props.todo };\r\n        updatedTodo.isEdit = true;\r\n        if (props.changeTodo) {\r\n            props.changeTodo(updatedTodo);\r\n        }\r\n    }\r\n    */\r\n\r\n\r\n    /*<img src=\"/images/icon-check.svg\" alt=\"\" />*/\r\n\r\n\r\n    const [refresh, doRefresh] = useState(false);\r\n    const onMouseLeave = () => {\r\n\r\n        doRefresh(!refresh);\r\n    }\r\n\r\n    return (\r\n        <TodoBox done={props.todo.done} index={props.index} onMouseLeave={onMouseLeave}>\r\n\r\n            <CustomCheckbox index={props.index}>\r\n                <input type=\"checkbox\" name={props.todo.key} id={props.todo.key} checked={props.todo.done} data-testid=\"todo-checkbox\" onChange={handleChange} />\r\n\r\n                <label htmlFor={props.todo.key}>\r\n                    <span>✓</span>\r\n                </label>\r\n            </CustomCheckbox>\r\n            <input type=\"text\" ref={textRef} name=\"title\" id=\"todo\" data-testid=\"todo-title\" value={props.todo.title} onChange={handleChange}\r\n                style={{ maxWidth: (props.todo?.title?.length * 0.7) + \"em\" }} />\r\n\r\n            <RenderedEmoji value={props.todo.title} />\r\n\r\n            <EmojiPicker addEmoji={addEmoji} refresh={refresh}/>\r\n\r\n            <CancelButton data-testid=\"cancel-todo\" onClick={() => {\r\n                if (props.deleteTodo) {\r\n                    props.deleteTodo(props.todo);\r\n                }\r\n            }}>\r\n\r\n                <img src='images/icon-cross.svg' alt=\"cancel\"></img>\r\n            </CancelButton>\r\n        </TodoBox>\r\n    )\r\n\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\nimport styled from 'styled-components';\r\nimport {TODO} from './ToDo';\r\n\r\n\r\nconst OptionsField = styled.ul`\r\n\r\n@media print\r\n{   \r\n    display: none !important;\r\n}\r\n\r\n  background-color: ${props => props.theme.todoBackgroundColor};\r\n  color: ${props => props.theme.optionsColor};\r\n  /* font-size: 0.8rem; */\r\n  padding: 1em;\r\n  border-bottom-right-radius: 0.3em;\r\n  border-bottom-left-radius: 0.3em;\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  align-items: center;\r\n  box-shadow: 10px 10px 20px ${props => props.theme.shadowColor};\r\n\r\n  & > * {\r\n      font-size: 0.8rem;\r\n  }\r\n\r\n  & > *:last-child {\r\n      text-align: right;\r\n  }\r\n\r\n  form {\r\n      ul {\r\n        display: flex;\r\n        justify-content: space-around;\r\n      }\r\n  }\r\n\r\n  @media (max-width: 650px) {\r\n      grid-template-columns: repeat(2, 1fr);\r\n      padding: 0;\r\n      background-color: ${props => props.theme.mainBackgroundColor};\r\n      box-shadow: none;\r\n\r\n      & > * {\r\n          background-color: ${props => props.theme.todoBackgroundColor};\r\n          padding: 1em;\r\n      }\r\n\r\n      form {\r\n          grid-column: 1 / -1;\r\n          margin-top: 1.5em;\r\n          border-radius: 0.3em;\r\n          box-shadow: 0 0 2em ${props => props.theme.shadowColor};\r\n      }\r\n\r\n      & > *:first-child {\r\n          border-bottom-left-radius: 0.3em;\r\n          height: 100%;\r\n          box-sizing: border-box;\r\n      }\r\n\r\n      & > *:last-child {\r\n          grid-row: 1;\r\n          grid-column: 2;\r\n          border-bottom-right-radius: 0.3em;\r\n      }\r\n  }\r\n`;\r\n\r\nconst FilterItem = styled.li`\r\n\r\n    font-weight: bold;\r\n    label {\r\n        cursor: pointer;\r\n    }\r\n\r\n    label:hover {\r\n        color: ${props => props.theme.optionsHover};\r\n    }\r\n\r\n    input:checked + label {\r\n        color: ${props => props.theme.optionsActive};\r\n    }\r\n\r\n    input[type=\"radio\"] {\r\n        display: none;\r\n    }\r\n`;\r\n\r\nconst ClearCompleted = styled.button`\r\n\r\n  background-color: inherit;\r\n  border: none;\r\n  color: inherit;\r\n  cursor: pointer;\r\n  font: inherit;\r\n\r\n  &:hover {\r\n  color: ${props => props.theme.optionsHover};\r\n  }\r\n\r\n`;\r\n\r\nexport interface Filter {\r\n    status: string;\r\n}\r\n\r\n\r\ninterface IOptionsProps {\r\n    filter: Filter;\r\n    todos: TODO[];\r\n    changeFilter(filter: Filter): void;\r\n    deleteTodos(): void;\r\n  }\r\n  \r\n\r\nclass Options extends React.Component<IOptionsProps> {\r\n\r\n    handleChange = (e: ChangeEvent<HTMLFormElement>) => {\r\n        this.props.changeFilter({status: `${e.target.id}`});\r\n    }\r\n\r\n    /*\r\n    \r\n    several calls to deleteTodo did not work since setState is a callback function and it wasn't updating the todos in between several calls.\r\n    I worked around this by implementing a new deleteTodos function that eliminates all completed todos... \r\n    */\r\n\r\n    render () {\r\n        const activeTodos = this.props.todos.reduce((tally, todo) => (!todo.done ? tally+1 : tally),  0);\r\n        return (\r\n            <OptionsField>\r\n                <li>{`${activeTodos}`} items left!</li>\r\n                <form onChange={this.handleChange}>\r\n                    <ul>\r\n                        <FilterItem>\r\n                            <input type=\"radio\" defaultChecked={this.props.filter.status === \"all\"} name=\"filter\" id=\"all\" value=\"All\" />\r\n                            <label htmlFor=\"all\">All</label>\r\n                        </FilterItem>\r\n                        <FilterItem>\r\n                            <input type=\"radio\" defaultChecked={this.props.filter.status === \"active\"} name=\"filter\" id=\"active\" value=\"Active\" />\r\n                            <label htmlFor=\"active\">Active</label>\r\n                        </FilterItem>\r\n                        <FilterItem>\r\n                            <input type=\"radio\" defaultChecked={this.props.filter.status === \"completed\"} name=\"filter\" id=\"completed\" value=\"completed\" />\r\n                            <label htmlFor=\"completed\">Completed</label>\r\n                        </FilterItem>\r\n                    </ul>\r\n                </form>\r\n                <li><ClearCompleted onClick={() => this.props.deleteTodos()} data-testid=\"clear-completed\">Clear completed</ClearCompleted></li>\r\n            </OptionsField>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport {Options};","import styled from 'styled-components';\r\n//import {Theme} from './styles/theme';\r\n\r\nconst StyledHeader = styled.div`\r\n\r\n  @media print { display: none !important; }\r\n    \r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n\r\n    h1 {\r\n        color: ${props => props.theme.headerColor};\r\n        font-weight: 700;\r\n        text-transform: uppercase;\r\n        font-size: 2rem;\r\n        letter-spacing: 0.3em;\r\n        margin: 1em 0;\r\n    }\r\n\r\n    button {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        align-self: center;\r\n\r\n        height: 30px;\r\n\r\n        img { \r\n            height: 30px;\r\n            margin-right: 5px;\r\n        }\r\n\r\n        span {\r\n            border-bottom: dotted 1px #f6f6ff;\r\n            color: #f6f6ff;\r\n            font-weight: bold;\r\n        }\r\n\r\n    }\r\n\r\n    .theme-changer {\r\n        border: none;\r\n        background: transparent;\r\n        cursor: pointer;\r\n    }\r\n\r\n    /* img {\r\n        width: 100%;\r\n    } */\r\n`;\r\n\r\n\r\n\r\nexport const ListHeader = (props: any) => {\r\n    const printPage = () => {\r\n        window.print();\r\n    };\r\n\r\n\r\n    return(\r\n        <StyledHeader className=\"header\">\r\n            <h1>Print your tasks</h1>\r\n            <button className=\"theme-changer\" onClick={printPage}>\r\n                <img alt=\"theme-changer\" src=\"./logo192.png\">\r\n                </img>\r\n                <span>Print</span>\r\n            </button>\r\n        </StyledHeader>\r\n    )\r\n  \r\n}\r\n","import {useState, useEffect} from \"react\";\r\n\r\n/*\r\nexport interface Sticky {\r\n    value: any;\r\n    setValue: Dispatch<any>;\r\n    clearState(): void;\r\n}\r\n*/\r\n\r\n\r\nconst inIframe = () => {\r\n  try {\r\n      return window.self !== window.top;\r\n  } catch (e) {\r\n      return true;\r\n  }\r\n}\r\n\r\nexport const useStickyState = (key: string, defaultValue: any) => {\r\n    const [value, setValue] = useState(() => {\r\n\r\n      if (!inIframe()) {\r\n        console.log(\"not iniframe\");\r\n\r\n        const stickyValue = window.localStorage.getItem(key);\r\n        return stickyValue !== null\r\n          ? JSON.parse(stickyValue)\r\n          : defaultValue;\r\n      } else {\r\n        \r\n        //console.log(\"iframe!!\");\r\n        return defaultValue;\r\n      }\r\n    });\r\n\r\n    const clearState = () => localStorage.removeItem(key);    \r\n\r\n    useEffect(() => {\r\n\r\n      if (!inIframe()) {\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n      }\r\n    }, [key, value]);\r\n    return [value, setValue, clearState];\r\n}\r\n","import styled, { ThemeProvider } from 'styled-components';\r\nimport { DragDropContext, Droppable, Draggable, DropResult, DragUpdate, ResponderProvided } from 'react-beautiful-dnd';\r\nimport GlobalStyle from './styles/globalStyles';\r\nimport { lightTheme, /*darkTheme,*/ Theme } from './styles/theme';\r\nimport InputForm from './InputForm';\r\nimport { TODO, ToDo } from './ToDo';\r\nimport { Filter, Options } from './Options';\r\nimport { ListHeader } from './ListHeader';\r\nimport { useStickyState } from \"./storage/LocalStorage\";\r\nimport { useEffect } from 'react';\r\n\r\nconst TodoWrapper = styled.div`\r\n    max-width: 800px;\r\n    position: relative;\r\n    margin: auto;\r\n\r\n    @media (max-width: 650px) {\r\n        padding: 0 2rem;\r\n        top: 1.5rem;\r\n    }\r\n`;\r\n\r\nconst TodoList = styled.ul`\r\n\r\n    box-shadow: 10px 10px 20px ${props => props.theme.shadowColor};\r\n    div:first-child li{\r\n      border-top-left-radius: 0.3em;\r\n      border-top-right-radius: 0.3em;\r\n    }\r\n\r\n    @media (max-width: 650px) {\r\n        box-shadow: none;\r\n    }\r\n`;\r\n\r\nconst BackgroundHeader = styled.div`\r\n\r\n@media print { display: none !important; }\r\n\r\n  width: 100vw;\r\n  position: absolute;\r\n  top: 0;\r\n  height: 30vh;\r\n  background: ${props => props.theme.mainBackground} center center/cover;\r\n\r\n  @media (max-width: 650px) {\r\n      content: ${props => props.theme.mobileBackground};\r\n      max-width: 100vw;\r\n  }\r\n`;\r\n\r\nconst Footer = styled.footer`\r\n\r\n@media print\r\n{    \r\n    display: none !important;\r\n}\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    padding: 1.5em 0;\r\n    color: ${props => props.theme.optionsColor};\r\n`;\r\n\r\nexport interface State {\r\n    //todos: TODO[];\r\n    filter: Filter;\r\n    currentTheme: Theme;\r\n}\r\n\r\nconst inIframe = () => {\r\n    try {\r\n        return window.self !== window.top;\r\n    } catch (e) {\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\nexport interface ParcedTask {\r\n    title: string;\r\n    done: boolean;\r\n}\r\n\r\n\r\nexport const App = (props: any) => {\r\n\r\n\r\n    //const [todos, todosSetValue] = useState<TODO[]>([]);\r\n    const [todos, todosSetValue] = useStickyState(\"todos\", []);\r\n    const [filterValue, setFilter] = useStickyState(\"filter\", {\r\n        status: 'all',\r\n    });\r\n\r\n    const state: State = {\r\n        filter: filterValue,\r\n        currentTheme: lightTheme,\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        let defaultTodos: TODO[] = [];\r\n\r\n        const onMessageReceivedFromIframe = (event: any) => {\r\n            const importTodos = (values: ParcedTask[]) => {\r\n                values.forEach((value: ParcedTask, index: number) => {\r\n                    const todo: TODO = {\r\n                        key: Date.now().toString() + index.toString(),\r\n                        title: value.title,\r\n                        done: value.done,\r\n                        newIndex: index\r\n                    }\r\n                    defaultTodos.push(todo);\r\n                });\r\n                todosSetValue(defaultTodos);\r\n            };\r\n\r\n            if (typeof event.data === 'object' && event.data.call === 'sendTasks') {\r\n\r\n                //console.log('tasks', event.data.value);\r\n                importTodos(event.data.value as ParcedTask[]);                \r\n            }\r\n        }\r\n\r\n        if (inIframe()) {\r\n            window.addEventListener(\"message\", onMessageReceivedFromIframe);\r\n            window.parent.postMessage({ call: 'AppIsReady' }, '*');\r\n        }\r\n\r\n    }, [todosSetValue]);\r\n\r\n\r\n    // method to add a todo item to the list:\r\n    const addTodo = (todo: TODO) => {\r\n        // copy the state\r\n        const newTodos: TODO[] = [...todos];\r\n        // add my item to the copied state\r\n        newTodos.push(todo);\r\n        // set the state with the state API\r\n        todosSetValue(newTodos as any);\r\n    }\r\n\r\n\r\n    // change a todo-item\r\n    const changeTodo = (todo: TODO) => {\r\n        // copy the state\r\n        const newTodos: TODO[] = [...todos];\r\n        // update the item in question\r\n        const myIndex = newTodos.findIndex((item: TODO) => item.key === todo.key);\r\n\r\n        //console.log('new state', todo.isEdit);\r\n        //todo.isEdit = false;\r\n        newTodos[myIndex] = todo;\r\n        todosSetValue(newTodos as any);\r\n\r\n    }\r\n\r\n    const deleteTodos = () => {\r\n        const newTodos = [...todos];\r\n        const uncomplete = newTodos.filter((item: TODO) => item.done === false);\r\n\r\n        todosSetValue(uncomplete as any);\r\n    }\r\n\r\n    const deleteTodo = (todo: TODO) => {\r\n        const newTodos = [...todos];\r\n        const myIndex = newTodos.findIndex((item: TODO) => item.key === todo.key)\r\n        newTodos.splice(myIndex, 1);\r\n\r\n\r\n        newTodos.forEach((todo: TODO, index: number) => {\r\n            todo.newIndex = index;\r\n        });\r\n\r\n        todosSetValue(newTodos as any);\r\n    }\r\n\r\n    const changeFilter = (filterObject: Filter) => {\r\n        // for now, I simply want to override the filter, but this could change\r\n        //props.setState({filter: filterObject});\r\n        setFilter(filterObject);\r\n    }\r\n\r\n    const applyListFilter = () => {\r\n\r\n        switch (state.filter.status) {\r\n            case \"active\":\r\n                return todos.filter((todo: TODO) => todo.done === false);\r\n            case \"completed\":\r\n                return todos.filter((todo: TODO) => todo.done === true);\r\n            default:\r\n                return todos;\r\n        }\r\n    }\r\n\r\n    const handleOnDragEnd = (result: DropResult) => {\r\n        // avoid application error if item is dragged outside of the dragdropcontext\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        // copy the state\r\n        const reorderedTodos = [...todos];\r\n        // obtain the todo and remove it from the array\r\n        const [movedTodo] = reorderedTodos.splice(result.source.index, 1);\r\n        reorderedTodos.splice(result.destination.index, 0, movedTodo);\r\n        reorderedTodos.forEach((todo: TODO, index: number) => todo.newIndex = index);\r\n\r\n        todosSetValue(reorderedTodos as any);\r\n\r\n    }\r\n\r\n    const handleOnDragUpdate = (initial: DragUpdate, provided: ResponderProvided) => {\r\n        //console.log(\"new index\", initial, provided);\r\n\r\n        const newTodos: TODO[] = [...todos];\r\n\r\n        let indexes = newTodos.map((todo: TODO, index: number) => index);\r\n\r\n        //console.log(\"before\", indexes);\r\n        indexes.splice(initial.source.index, 1);\r\n        indexes.splice(initial.destination?.index || 0, 0, initial.source.index);\r\n\r\n        //console.log(\"after\", indexes);\r\n\r\n        newTodos.forEach((todo: TODO, index: number) => {\r\n            todo.newIndex = indexes.indexOf(index);\r\n        })\r\n        todosSetValue(newTodos as any);\r\n    }\r\n  \r\n    const getIndex = (todo: TODO, index: number): number => {\r\n        //console.log(todo.newIndex, index);\r\n\r\n        if (todo.newIndex >= 0) {\r\n            return todo.newIndex;\r\n        }\r\n        return index;\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={state.currentTheme}>\r\n            <GlobalStyle theme={state.currentTheme} />\r\n            <BackgroundHeader></BackgroundHeader>\r\n            <TodoWrapper>\r\n                <ListHeader />\r\n\r\n                <InputForm addTodo={addTodo} />\r\n                <DragDropContext onDragEnd={handleOnDragEnd} onDragUpdate={handleOnDragUpdate}>\r\n                    <Droppable droppableId=\"todos\" >\r\n\r\n                        {(provided, snapshot) => (\r\n                            <TodoList {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {applyListFilter().map((todo: TODO, index: number) =>\r\n                                    <Draggable key={todo.key} draggableId={todo.key.toString()} index={index} /*disableInteractiveElementBlocking={!!(todo.isEdit)}*/ >\r\n                                        {(provided, snapshot) => (\r\n                                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                <ToDo index={getIndex(todo, index)} todo={todo} changeTodo={changeTodo} deleteTodo={deleteTodo} />\r\n                                            </div>)}\r\n                                    </Draggable>)}\r\n                                {provided.placeholder}\r\n                            </TodoList>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                <Options filter={state.filter} changeFilter={changeFilter} todos={todos} deleteTodos={deleteTodos} />\r\n                <Footer>\r\n                    <p>Drag and drop to reorder list</p>\r\n                </Footer>\r\n            </TodoWrapper>\r\n        </ThemeProvider>\r\n    )\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = (onPerfEntry?: any) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}